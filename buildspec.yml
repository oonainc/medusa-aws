version: 0.2
# this buildspec is used by aws CodeBuild and publishes this app to ECR
# we already set privileged: true in our linux environment configuration in CDK
# so this makes Docker available for use here

env:
phases:
  install:
    runtime-versions:
      python: 3.x # to be able to use AWS CLI
    commands:
      - echo installing AWS CLI...
      - pip3 install awscli --upgrade
      - aws --version

  pre_build:
    commands:
      - echo setting AWS zone to us-east-1...
      - aws configure set default.region us-east-1

      # generate a unique image tag instead of using string 'latest' as tag
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - TIMESTAMP=$(date +%Y%m%d%H%M%S)
      - IMAGE_TAG="$COMMIT_HASH-$TIMESTAMP"
      - echo unique image tag is $IMAGE_TAG

  build:
    commands:
      - echo building docker image and push to ECR...
      - docker build -t oonainc/ecomm:$IMAGE_TAG .

  post_build:
    commands:
      # retrieve an authentication token and authenticate your Docker client to your registry. Use the AWS CLI
      # the IAM role we attached to CodeBuild help makes this easier
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 236426078444.dkr.ecr.us-east-1.amazonaws.com

      # tag image so we can push the image to ECR
      - docker tag oonainc/ecomm:$IMAGE_TAG 236426078444.dkr.ecr.us-east-1.amazonaws.com/oonainc/ecomm:$IMAGE_TAG
      # push the image to ECR
      - docker push "236426078444.dkr.ecr.us-east-1.amazonaws.com/oonainc/ecomm:$IMAGE_TAG"
      # write image detail to be used by CodeDeploy
      - printf '{"imageUri":"%s"}' "236426078444.dkr.ecr.us-east-1.amazonaws.com/oonainc/ecomm:$IMAGE_TAG" > imageDetail.json

artifacts:
  files:
    - imageDetail.json
    - taskdef.json
