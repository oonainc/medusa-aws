version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 22 # for frontend tests
      python: 3.x # to be able to use AWS CLI
    commands:
      - updating system and installing dependencies...
      - sudo dnf update -y

      - setting up for frontend tests...
      - echo node and npm versions...
      - npm install -g @angular/cli
      - sudo dnf install -y chromium
      - npm ci
      - npm i @rollup/rollup-linux-arm64-gnu --save-optional

      - echo installing AWS CLI...
      - pip3 install awscli --upgrade
      - aws --version

  pre_build:
    commands:
      - echo setting AWS zone to us-east-1...
      - aws configure set default.region us-east-1

      # for frontend tests:
      # compile environments/env.prod.ts and buildspec-edit.ts so we can use them
      - npx tsc buildspec-edit.ts environments/env.prod.ts
      # run buildspec-edit.ts and save its output to a file called env.others (more env variables)
      - node buildspec-edit.js >> env.others
      # load the env variables to our buildspec
      - export $(cat env.others | xargs)

      # imageDetail.json is the output artifact from the previous CodeBuild stage that built our ECR image
      - IMAGE_URI=$(jq -r '.imageUri' imageDetail.json)
      - echo extracted image URI $IMAGE_URI from imageDetail.json
      - echo logging in to Amazon ECR...
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 236426078444.dkr.ecr.us-east-1.amazonaws.com

  build:
    commands:
      - echo pulling docker image from ECR...
      - docker pull $IMAGE_URI

      - echo running backend tests...
      - docker run --rm -e DATABASE_READ_URL=$DATABASE_READ_URL -e DATABASE_WRITE_URL=$DATABASE_WRITE_URL $IMAGE_URI npm run test:unit
      - docker run --rm -e DATABASE_READ_URL=$DATABASE_READ_URL -e DATABASE_WRITE_URL=$DATABASE_WRITE_URL $IMAGE_URI npm run test:integration:modules

      - echo running frontend tests...
      - npx ng test --browsers=ChromeHeadless --no-watch

  post_build:
    commands:
      - echo tests run successfully...

