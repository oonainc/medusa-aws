version: 0.2

env:
  secrets-manager:
    DATABASE_READ_URL: "arn:aws:secretsmanager:us-east-1:236426078444:secret:ecomm-secrets-X5kIyP:DATABASE_STAGING_READ_URL::"
    DATABASE_WRITE_URL: "arn:aws:secretsmanager:us-east-1:236426078444:secret:ecomm-secrets-X5kIyP:DATABASE_STAGING_WRITE_URL::"
    REDIS_URL: "arn:aws:secretsmanager:us-east-1:236426078444:secret:ecomm-secrets-X5kIyP:REDIS_URL::"
    S3_USER_SECRET_ACCESS_KEY: "arn:aws:secretsmanager:us-east-1:236426078444:secret:ecomm-secrets-X5kIyP:S3_USER_SECRET_ACCESS_KEY::"
    S3_USER_ACCESS_KEY: "arn:aws:secretsmanager:us-east-1:236426078444:secret:ecomm-secrets-X5kIyP:S3_USER_ACCESS_KEY::"
  variables:
    NODE_ENV: "development" # because production skips devDependencies in npm install

phases:
  install:
    runtime-versions:
      nodejs: 22 # for frontend tests
      python: 3.x
    commands:
      - echo AWS CLI version...
      - aws --version
      
      # we're using two CodePipeline sources: FrontendRepo and BuildArtifact (which is primary)
      - echo installing dependencies for frontend compatibility tests...
      - cd $CODEBUILD_SRC_DIR_FrontendRepo
      - npm install
      - npm install -g @angular/cli
      - npm i @rollup/rollup-linux-arm64-gnu --save-optional
      - npm i -D karma-firefox-launcher
      - sudo yum install -y firefox > /dev/null

  pre_build:
    commands:
      - echo setting AWS zone to us-east-1...
      - aws configure set default.region us-east-1

      # imageDetail.json is the output artifact from the previous CodeBuild stage that built our ECR image
      - cd $CODEBUILD_SRC_DIR # switch back
      - IMAGE_URI=$(jq -r '.imageUri' imageDetail.json)
      - echo extracted image URI $IMAGE_URI from imageDetail.json

      - echo logging in to Amazon ECR...
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 236426078444.dkr.ecr.us-east-1.amazonaws.com

  build:
    commands:
      - echo pulling docker image from ECR...
      - docker pull $IMAGE_URI

      - echo running backend tests...
      - |
        docker run --rm \
          -e DATABASE_READ_URL=$DATABASE_READ_URL \
          -e DATABASE_WRITE_URL=$DATABASE_WRITE_URL \
          -e REDIS_URL=$REDIS_URL \
          -e IS_STAGING_ENV=true \
          -e S3_USER_SECRET_ACCESS_KEY=$S3_USER_SECRET_ACCESS_KEY \
          -e S3_USER_ACCESS_KEY=$S3_USER_ACCESS_KEY \
          -e NODE_ENV=production \
          $IMAGE_URI npm run test:unit
      - |
        docker run --rm \
          -e DATABASE_READ_URL=$DATABASE_READ_URL \
          -e DATABASE_WRITE_URL=$DATABASE_WRITE_URL \
          -e REDIS_URL=$REDIS_URL \
          -e IS_STAGING_ENV=true \
          -e S3_USER_SECRET_ACCESS_KEY=$S3_USER_SECRET_ACCESS_KEY \
          -e S3_USER_ACCESS_KEY=$S3_USER_ACCESS_KEY \
          -e NODE_ENV=production \
          $IMAGE_URI npm run test:integration:modules

      # for frontend tests:
      - echo testing compatibility with current released frontend ...
      - cd $CODEBUILD_SRC_DIR_FrontendRepo
      - npx ng test --browsers=FirefoxHeadless --no-watch

  post_build:
    commands:
      - echo tests run successfully...

