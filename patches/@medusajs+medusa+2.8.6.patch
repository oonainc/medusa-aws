diff --git a/node_modules/@medusajs/medusa/dist/commands/start.js b/node_modules/@medusajs/medusa/dist/commands/start.js
index 488f371..21501d8 100644
--- a/node_modules/@medusajs/medusa/dist/commands/start.js
+++ b/node_modules/@medusajs/medusa/dist/commands/start.js
@@ -7,7 +7,8 @@ exports.traceRequestHandler = void 0;
 exports.registerInstrumentation = registerInstrumentation;
 const os_1 = __importDefault(require("os"));
 const path_1 = __importDefault(require("path"));
-const http_1 = __importDefault(require("http"));
+// const http_1 = __importDefault(require("http"));
+const http_s = __importDefault(require("https"));
 const express_1 = __importDefault(require("express"));
 const cluster_1 = __importDefault(require("cluster"));
 const telemetry_1 = require("@medusajs/telemetry");
@@ -86,7 +87,24 @@ async function start(args) {
         (0, telemetry_1.track)("CLI_START");
         await registerInstrumentation(directory);
         const app = (0, express_1.default)();
-        const http_ = http_1.default.createServer(async (req, res) => {
+
+        // ensure Express correctly trusts the reverse proxy (API Gateway)
+        app.set('trust proxy', true);
+
+        const httpsOptions = {
+            // server identity self-signed for private trust
+            key: fs.readFileSync('../../../../../certs/server.key'),
+            cert: fs.readFileSync('../../../../../certs/server.crt'),
+        
+            // trust API Gatewayâ€™s client certificate
+            ca: fs.readFileSync('../../../../../certs/api_gateway.crt'),
+        
+            // enforce client cert presentation and validation
+            requestCert: true,
+            rejectUnauthorized: true,
+        }
+
+        const http_ = http_s.default.createServer(httpsOptions, async (req, res) => {
             const stack = app._router.stack;
             await new Promise((resolve) => {
                 res.on("finish", resolve);
@@ -104,6 +122,25 @@ async function start(args) {
                 }
             });
         });
+
+        // const http_ = http_1.default.createServer(async (req, res) => {
+        //     const stack = app._router.stack;
+        //     await new Promise((resolve) => {
+        //         res.on("finish", resolve);
+        //         if (exports.traceRequestHandler) {
+        //             const expressHandlerPath = findExpressRoutePath({
+        //                 stack,
+        //                 url: (0, url_1.parse)(req.url, false).pathname,
+        //             });
+        //             void (0, exports.traceRequestHandler)(async () => {
+        //                 app(req, res);
+        //             }, req, res, expressHandlerPath);
+        //         }
+        //         else {
+        //             app(req, res);
+        //         }
+        //     });
+        // });
         try {
             const { shutdown, gqlSchema, container, modules } = await (0, loaders_1.default)({
                 directory,
