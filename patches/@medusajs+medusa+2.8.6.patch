diff --git a/node_modules/@medusajs/medusa/dist/commands/start.js b/node_modules/@medusajs/medusa/dist/commands/start.js
index 488f371..dbebd86 100644
--- a/node_modules/@medusajs/medusa/dist/commands/start.js
+++ b/node_modules/@medusajs/medusa/dist/commands/start.js
@@ -8,6 +8,11 @@ exports.registerInstrumentation = registerInstrumentation;
 const os_1 = __importDefault(require("os"));
 const path_1 = __importDefault(require("path"));
 const http_1 = __importDefault(require("http"));
+//
+// const fs = __importDefault(require("fs"));
+// const path = __importDefault(require("path"));
+// const https = __importDefault(require("https"));
+//
 const express_1 = __importDefault(require("express"));
 const cluster_1 = __importDefault(require("cluster"));
 const telemetry_1 = require("@medusajs/telemetry");
@@ -58,7 +63,7 @@ function displayAdminUrl({ host, port, container, }) {
     if (disable) {
         return;
     }
-    logger.info(`Admin URL → http://${host || "localhost"}:${port}${adminPath}`);
+    logger.info(`Admin URL → http(s)://${host || "localhost"}:${port}${adminPath}`);
 }
 /**
  * Retrieve the route path from the express stack based on the input url
@@ -86,6 +91,42 @@ async function start(args) {
         (0, telemetry_1.track)("CLI_START");
         await registerInstrumentation(directory);
         const app = (0, express_1.default)();
+
+        // const certificatesDir = path.default.resolve(process.cwd(), 'certs');
+        // const httpsOptions = {
+        //     // server identity self-signed for private trust
+        //     // $ openssl genrsa -out server.key 2048
+        //     // $ openssl req -new -x509 -utf8 -key server.key -out server.crt -days 3650 -sha256
+        //     key: fs.default.readFileSync(path.default.join(certificatesDir, 'server.key')),
+        //     cert: fs.default.readFileSync(path.default.join(certificatesDir, 'server.crt')),
+        
+        //     // aws private certificate authority certificate
+        //     ca: fs.default.readFileSync(path.default.join(certificatesDir, 'Certificate.pem')),
+        
+        //     // enforce client cert presentation and validation
+        //     requestCert: true,
+        //     rejectUnauthorized: true
+        // }
+
+        // const http_ = https.default.createServer(httpsOptions, async (req, res) => {
+        //     const stack = app._router.stack;
+        //     await new Promise((resolve) => {
+        //         res.on("finish", resolve);
+        //         if (exports.traceRequestHandler) {
+        //             const expressHandlerPath = findExpressRoutePath({
+        //                 stack,
+        //                 url: (0, url_1.parse)(req.url, false).pathname,
+        //             });
+        //             void (0, exports.traceRequestHandler)(async () => {
+        //                 app(req, res);
+        //             }, req, res, expressHandlerPath);
+        //         }
+        //         else {
+        //             app(req, res);
+        //         }
+        //     });
+        // });
+
         const http_ = http_1.default.createServer(async (req, res) => {
             const stack = app._router.stack;
             await new Promise((resolve) => {
